// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bgr2hsv_Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_mat_rows_dout,
        p_src_mat_rows_empty_n,
        p_src_mat_rows_read,
        p_read,
        p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read,
        p_dst_mat_data_V_din,
        p_dst_mat_data_V_full_n,
        p_dst_mat_data_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_src_mat_rows_dout;
input   p_src_mat_rows_empty_n;
output   p_src_mat_rows_read;
input  [31:0] p_read;
input  [23:0] p_src_mat_data_V_dout;
input   p_src_mat_data_V_empty_n;
output   p_src_mat_data_V_read;
output  [23:0] p_dst_mat_data_V_din;
input   p_dst_mat_data_V_full_n;
output   p_dst_mat_data_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_mat_rows_read;
reg p_src_mat_data_V_read;
reg p_dst_mat_data_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] xf_cv_icvSaturate8_address0;
reg    xf_cv_icvSaturate8_ce0;
wire   [7:0] xf_cv_icvSaturate8_q0;
wire   [9:0] xf_cv_icvSaturate8_address1;
reg    xf_cv_icvSaturate8_ce1;
wire   [7:0] xf_cv_icvSaturate8_q1;
wire   [9:0] xf_cv_icvSaturate8_address2;
reg    xf_cv_icvSaturate8_ce2;
wire   [7:0] xf_cv_icvSaturate8_q2;
wire   [9:0] xf_cv_icvSaturate8_address3;
reg    xf_cv_icvSaturate8_ce3;
wire   [7:0] xf_cv_icvSaturate8_q3;
wire   [7:0] sdiv_address0;
reg    sdiv_ce0;
wire  signed [19:0] sdiv_q0;
wire   [7:0] hdiv_address0;
reg    hdiv_ce0;
wire   [16:0] hdiv_q0;
reg    p_src_mat_rows_blk_n;
wire    in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_blk_n;
reg    p_src_mat_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln125_reg_710;
wire    call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_blk_n;
reg    p_dst_mat_data_V_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln125_reg_710_pp0_iter3_reg;
reg   [63:0] indvar_flatten_reg_235;
wire   [63:0] bound_fu_267_p2;
reg   [63:0] bound_reg_705;
reg    ap_block_state1;
wire   [0:0] icmp_ln125_fu_273_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln125_reg_710_pp0_iter1_reg;
reg   [0:0] icmp_ln125_reg_710_pp0_iter2_reg;
wire   [63:0] add_ln125_fu_278_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] b_V_fu_284_p1;
reg   [7:0] b_V_reg_719;
reg   [7:0] b_V_reg_719_pp0_iter2_reg;
wire   [8:0] lhs_V_3_fu_288_p1;
reg   [8:0] lhs_V_3_reg_725;
reg   [8:0] lhs_V_3_reg_725_pp0_iter2_reg;
wire   [7:0] g_V_fu_292_p4;
reg   [7:0] g_V_reg_732;
reg   [7:0] g_V_reg_732_pp0_iter2_reg;
wire   [8:0] rhs_V_fu_302_p1;
reg   [8:0] rhs_V_reg_737;
reg   [8:0] rhs_V_reg_737_pp0_iter2_reg;
reg   [7:0] r_V_reg_743;
wire   [9:0] zext_ln215_1_fu_350_p1;
reg   [9:0] zext_ln215_1_reg_759;
wire   [8:0] rhs_V_2_fu_353_p1;
reg   [8:0] rhs_V_2_reg_764;
reg   [7:0] xf_cv_icvSaturate8_2_reg_770;
reg    ap_enable_reg_pp0_iter2;
wire   [9:0] zext_ln142_1_fu_365_p1;
reg   [9:0] zext_ln142_1_reg_775;
wire   [7:0] vmin_V_1_fu_390_p2;
reg   [7:0] vmin_V_1_reg_785;
wire   [7:0] add_ln214_1_fu_458_p2;
reg   [7:0] add_ln214_1_reg_795;
wire   [7:0] diff_V_fu_468_p2;
reg   [7:0] diff_V_reg_800;
wire   [8:0] ret_V_8_fu_492_p2;
reg  signed [8:0] ret_V_8_reg_805;
wire   [12:0] and_ln152_2_fu_602_p2;
reg  signed [12:0] and_ln152_2_reg_815;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
wire    call_ln160_write_r_fu_246_ap_start;
wire    call_ln160_write_r_fu_246_ap_done;
wire    call_ln160_write_r_fu_246_ap_idle;
wire    call_ln160_write_r_fu_246_ap_ready;
wire   [23:0] call_ln160_write_r_fu_246_val_V;
wire   [23:0] call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_din;
wire    call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_write;
reg    call_ln160_write_r_fu_246_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call94;
reg    ap_block_state3_pp0_stage0_iter1_ignore_call94;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call94;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call94;
wire    ap_block_state6_pp0_stage0_iter4_ignore_call94;
reg    ap_block_pp0_stage0_11001_ignoreCallOp121;
wire    in_pix_V_read_r_fu_253_ap_start;
wire    in_pix_V_read_r_fu_253_ap_done;
wire    in_pix_V_read_r_fu_253_ap_idle;
wire    in_pix_V_read_r_fu_253_ap_ready;
wire    in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_read;
wire   [23:0] in_pix_V_read_r_fu_253_ap_return;
reg    in_pix_V_read_r_fu_253_ap_ce;
wire    ap_block_state2_pp0_stage0_iter0_ignore_call3;
wire    ap_block_state3_pp0_stage0_iter1_ignore_call3;
wire    ap_block_state4_pp0_stage0_iter2_ignore_call3;
wire    ap_block_state5_pp0_stage0_iter3_ignore_call3;
reg    ap_block_state6_pp0_stage0_iter4_ignore_call3;
reg    ap_block_pp0_stage0_11001_ignoreCallOp21;
reg    call_ln160_write_r_fu_246_ap_start_reg;
reg    in_pix_V_read_r_fu_253_ap_start_reg;
wire   [63:0] zext_ln544_fu_334_p1;
wire   [63:0] zext_ln544_2_fu_345_p1;
wire   [63:0] zext_ln544_1_fu_385_p1;
wire   [63:0] zext_ln544_3_fu_411_p1;
wire   [63:0] zext_ln151_fu_448_p1;
wire   [63:0] zext_ln544_4_fu_474_p1;
wire   [31:0] bound_fu_267_p0;
wire   [31:0] bound_fu_267_p1;
wire   [8:0] sub_ln1354_4_fu_322_p2;
wire   [8:0] add_ln1353_fu_328_p2;
wire   [8:0] ret_V_2_fu_306_p2;
wire   [8:0] ret_V_3_fu_339_p2;
wire   [8:0] zext_ln142_fu_356_p1;
wire   [8:0] v_fu_360_p2;
wire   [9:0] ret_V_fu_369_p2;
wire   [9:0] ret_V_1_fu_375_p2;
wire  signed [10:0] sext_ln1353_fu_381_p1;
wire   [8:0] lhs_V_1_fu_395_p1;
wire   [8:0] ret_V_4_fu_399_p2;
wire   [8:0] ret_V_5_fu_405_p2;
wire   [8:0] ret_V_9_fu_423_p2;
wire   [8:0] ret_V_10_fu_431_p2;
wire   [9:0] zext_ln143_fu_439_p1;
wire   [9:0] v_1_fu_443_p2;
wire   [7:0] add_ln214_fu_453_p2;
wire   [7:0] sub_ln214_fu_463_p2;
wire   [0:0] icmp_ln879_fu_479_p2;
wire   [8:0] ret_V_7_fu_416_p2;
wire   [8:0] select_ln148_fu_484_p3;
wire   [9:0] zext_ln879_fu_420_p1;
wire   [0:0] icmp_ln879_1_fu_498_p2;
wire   [0:0] xor_ln152_fu_512_p2;
wire   [8:0] shl_ln_fu_526_p3;
wire  signed [10:0] sext_ln152_fu_427_p1;
wire   [10:0] zext_ln152_fu_534_p1;
wire   [10:0] add_ln152_fu_538_p2;
wire   [10:0] select_ln149_fu_504_p3;
wire   [10:0] and_ln152_fu_544_p2;
wire   [0:0] xor_ln152_1_fu_554_p2;
wire   [9:0] shl_ln152_1_fu_568_p3;
wire   [11:0] zext_ln152_1_fu_576_p1;
wire  signed [11:0] sext_ln152_1_fu_435_p1;
wire   [11:0] add_ln152_1_fu_580_p2;
wire   [11:0] select_ln215_fu_560_p3;
wire   [11:0] and_ln152_1_fu_586_p2;
wire  signed [12:0] sext_ln152_3_fu_592_p1;
wire  signed [12:0] sext_ln152_2_fu_550_p1;
wire   [12:0] add_ln152_2_fu_596_p2;
wire   [12:0] select_ln1354_fu_518_p3;
wire  signed [19:0] grp_fu_686_p3;
wire  signed [30:0] grp_fu_695_p3;
wire   [19:0] trunc_ln153_fu_630_p1;
wire   [19:0] add_ln153_1_fu_638_p2;
(* use_dsp48 = "no" *) wire   [30:0] add_ln153_fu_633_p2;
wire   [0:0] tmp_fu_654_p3;
wire   [7:0] select_ln154_fu_662_p3;
wire   [7:0] trunc_ln_fu_644_p4;
wire   [7:0] val_assign_2_fu_614_p4;
wire   [7:0] add_ln156_fu_670_p2;
wire   [7:0] grp_fu_686_p1;
wire   [12:0] grp_fu_686_p2;
wire   [16:0] grp_fu_695_p2;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_267_p00;
wire   [63:0] bound_fu_267_p10;
wire   [19:0] grp_fu_686_p10;
wire   [30:0] grp_fu_695_p20;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 call_ln160_write_r_fu_246_ap_start_reg = 1'b0;
#0 in_pix_V_read_r_fu_253_ap_start_reg = 1'b0;
end

bgr2hsv_Loop_1_prbkb #(
    .DataWidth( 8 ),
    .AddressRange( 769 ),
    .AddressWidth( 10 ))
xf_cv_icvSaturate8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(xf_cv_icvSaturate8_address0),
    .ce0(xf_cv_icvSaturate8_ce0),
    .q0(xf_cv_icvSaturate8_q0),
    .address1(xf_cv_icvSaturate8_address1),
    .ce1(xf_cv_icvSaturate8_ce1),
    .q1(xf_cv_icvSaturate8_q1),
    .address2(xf_cv_icvSaturate8_address2),
    .ce2(xf_cv_icvSaturate8_ce2),
    .q2(xf_cv_icvSaturate8_q2),
    .address3(xf_cv_icvSaturate8_address3),
    .ce3(xf_cv_icvSaturate8_ce3),
    .q3(xf_cv_icvSaturate8_q3)
);

bgr2hsv_Loop_1_prcud #(
    .DataWidth( 20 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sdiv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sdiv_address0),
    .ce0(sdiv_ce0),
    .q0(sdiv_q0)
);

bgr2hsv_Loop_1_prdEe #(
    .DataWidth( 17 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
hdiv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hdiv_address0),
    .ce0(hdiv_ce0),
    .q0(hdiv_q0)
);

write_r call_ln160_write_r_fu_246(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ln160_write_r_fu_246_ap_start),
    .ap_done(call_ln160_write_r_fu_246_ap_done),
    .ap_idle(call_ln160_write_r_fu_246_ap_idle),
    .ap_ready(call_ln160_write_r_fu_246_ap_ready),
    .val_V(call_ln160_write_r_fu_246_val_V),
    .Mat_9_1080_1920_1_data_V_addr_din(call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_din),
    .Mat_9_1080_1920_1_data_V_addr_full_n(p_dst_mat_data_V_full_n),
    .Mat_9_1080_1920_1_data_V_addr_write(call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_write),
    .Mat_9_1080_1920_1_data_V_addr_blk_n(call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_blk_n),
    .ap_ce(call_ln160_write_r_fu_246_ap_ce)
);

read_r in_pix_V_read_r_fu_253(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(in_pix_V_read_r_fu_253_ap_start),
    .ap_done(in_pix_V_read_r_fu_253_ap_done),
    .ap_idle(in_pix_V_read_r_fu_253_ap_idle),
    .ap_ready(in_pix_V_read_r_fu_253_ap_ready),
    .Mat_9_1080_1920_1_data_V_addr_dout(p_src_mat_data_V_dout),
    .Mat_9_1080_1920_1_data_V_addr_empty_n(p_src_mat_data_V_empty_n),
    .Mat_9_1080_1920_1_data_V_addr_read(in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_read),
    .ap_return(in_pix_V_read_r_fu_253_ap_return),
    .Mat_9_1080_1920_1_data_V_addr_blk_n(in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_blk_n),
    .ap_ce(in_pix_V_read_r_fu_253_ap_ce)
);

chroma_mac_muladdeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 20 ))
chroma_mac_muladdeOg_U23(
    .din0(sdiv_q0),
    .din1(grp_fu_686_p1),
    .din2(grp_fu_686_p2),
    .dout(grp_fu_686_p3)
);

chroma_am_addmul_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 31 ))
chroma_am_addmul_fYi_U24(
    .din0(and_ln152_2_reg_815),
    .din1(ret_V_8_reg_805),
    .din2(grp_fu_695_p2),
    .dout(grp_fu_695_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((ap_start == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        call_ln160_write_r_fu_246_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln125_reg_710_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            call_ln160_write_r_fu_246_ap_start_reg <= 1'b1;
        end else if ((call_ln160_write_r_fu_246_ap_ready == 1'b1)) begin
            call_ln160_write_r_fu_246_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_pix_V_read_r_fu_253_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln125_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            in_pix_V_read_r_fu_253_ap_start_reg <= 1'b1;
        end else if ((in_pix_V_read_r_fu_253_ap_ready == 1'b1)) begin
            in_pix_V_read_r_fu_253_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_235 <= add_ln125_fu_278_p2;
    end else if ((~((ap_start == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_235 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_reg_710_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln214_1_reg_795 <= add_ln214_1_fu_458_p2;
        and_ln152_2_reg_815 <= and_ln152_2_fu_602_p2;
        diff_V_reg_800 <= diff_V_fu_468_p2;
        ret_V_8_reg_805 <= ret_V_8_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_reg_710 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_V_reg_719 <= b_V_fu_284_p1;
        g_V_reg_732 <= {{in_pix_V_read_r_fu_253_ap_return[15:8]}};
        lhs_V_3_reg_725[7 : 0] <= lhs_V_3_fu_288_p1[7 : 0];
        r_V_reg_743 <= {{in_pix_V_read_r_fu_253_ap_return[23:16]}};
        rhs_V_reg_737[7 : 0] <= rhs_V_fu_302_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        b_V_reg_719_pp0_iter2_reg <= b_V_reg_719;
        g_V_reg_732_pp0_iter2_reg <= g_V_reg_732;
        icmp_ln125_reg_710_pp0_iter2_reg <= icmp_ln125_reg_710_pp0_iter1_reg;
        icmp_ln125_reg_710_pp0_iter3_reg <= icmp_ln125_reg_710_pp0_iter2_reg;
        lhs_V_3_reg_725_pp0_iter2_reg[7 : 0] <= lhs_V_3_reg_725[7 : 0];
        rhs_V_reg_737_pp0_iter2_reg[7 : 0] <= rhs_V_reg_737[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_705 <= bound_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln125_reg_710 <= icmp_ln125_fu_273_p2;
        icmp_ln125_reg_710_pp0_iter1_reg <= icmp_ln125_reg_710;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_reg_710_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rhs_V_2_reg_764[7 : 0] <= rhs_V_2_fu_353_p1[7 : 0];
        vmin_V_1_reg_785 <= vmin_V_1_fu_390_p2;
        zext_ln142_1_reg_775[8 : 0] <= zext_ln142_1_fu_365_p1[8 : 0];
        zext_ln215_1_reg_759[7 : 0] <= zext_ln215_1_fu_350_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_reg_710_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xf_cv_icvSaturate8_2_reg_770 <= xf_cv_icvSaturate8_q0;
    end
end

always @ (*) begin
    if ((icmp_ln125_fu_273_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp121) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        call_ln160_write_r_fu_246_ap_ce = 1'b1;
    end else begin
        call_ln160_write_r_fu_246_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hdiv_ce0 = 1'b1;
    end else begin
        hdiv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp21) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_pix_V_read_r_fu_253_ap_ce = 1'b1;
    end else begin
        in_pix_V_read_r_fu_253_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln125_reg_710_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_dst_mat_data_V_blk_n = call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_blk_n;
    end else begin
        p_dst_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln125_reg_710_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        p_dst_mat_data_V_write = call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_write;
    end else begin
        p_dst_mat_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln125_reg_710 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_mat_data_V_blk_n = in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_blk_n;
    end else begin
        p_src_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln125_reg_710 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_mat_data_V_read = in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_read;
    end else begin
        p_src_mat_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_mat_rows_blk_n = p_src_mat_rows_empty_n;
    end else begin
        p_src_mat_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_mat_rows_read = 1'b1;
    end else begin
        p_src_mat_rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sdiv_ce0 = 1'b1;
    end else begin
        sdiv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xf_cv_icvSaturate8_ce0 = 1'b1;
    end else begin
        xf_cv_icvSaturate8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xf_cv_icvSaturate8_ce1 = 1'b1;
    end else begin
        xf_cv_icvSaturate8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xf_cv_icvSaturate8_ce2 = 1'b1;
    end else begin
        xf_cv_icvSaturate8_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xf_cv_icvSaturate8_ce3 = 1'b1;
    end else begin
        xf_cv_icvSaturate8_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln125_fu_273_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln125_fu_273_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln125_fu_278_p2 = (indvar_flatten_reg_235 + 64'd1);

assign add_ln1353_fu_328_p2 = (sub_ln1354_4_fu_322_p2 + rhs_V_fu_302_p1);

assign add_ln152_1_fu_580_p2 = ($signed(zext_ln152_1_fu_576_p1) + $signed(sext_ln152_1_fu_435_p1));

assign add_ln152_2_fu_596_p2 = ($signed(sext_ln152_3_fu_592_p1) + $signed(sext_ln152_2_fu_550_p1));

assign add_ln152_fu_538_p2 = ($signed(sext_ln152_fu_427_p1) + $signed(zext_ln152_fu_534_p1));

assign add_ln153_1_fu_638_p2 = (20'd2048 + trunc_ln153_fu_630_p1);

assign add_ln153_fu_633_p2 = ($signed(31'd2048) + $signed(grp_fu_695_p3));

assign add_ln156_fu_670_p2 = (select_ln154_fu_662_p3 + trunc_ln_fu_644_p4);

assign add_ln214_1_fu_458_p2 = (add_ln214_fu_453_p2 + xf_cv_icvSaturate8_2_reg_770);

assign add_ln214_fu_453_p2 = (xf_cv_icvSaturate8_q2 + b_V_reg_719_pp0_iter2_reg);

assign and_ln152_1_fu_586_p2 = (select_ln215_fu_560_p3 & add_ln152_1_fu_580_p2);

assign and_ln152_2_fu_602_p2 = (select_ln1354_fu_518_p3 & add_ln152_2_fu_596_p2);

assign and_ln152_fu_544_p2 = (select_ln149_fu_504_p3 & add_ln152_fu_538_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln125_reg_710_pp0_iter3_reg == 1'd0) & (call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln125_reg_710 == 1'd0) & (in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp121 = ((icmp_ln125_reg_710 == 1'd0) & (in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp21 = ((icmp_ln125_reg_710_pp0_iter3_reg == 1'd0) & (call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln125_reg_710_pp0_iter3_reg == 1'd0) & (call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln125_reg_710 == 1'd0) & (in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_src_mat_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0_ignore_call94 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln125_reg_710 == 1'd0) & (in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1_ignore_call3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1_ignore_call94 = ((icmp_ln125_reg_710 == 1'd0) & (in_pix_V_read_r_fu_253_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3_ignore_call94 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln125_reg_710_pp0_iter3_reg == 1'd0) & (call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4_ignore_call3 = ((icmp_ln125_reg_710_pp0_iter3_reg == 1'd0) & (call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_blk_n == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter4_ignore_call94 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_V_fu_284_p1 = in_pix_V_read_r_fu_253_ap_return[7:0];

assign bound_fu_267_p0 = bound_fu_267_p00;

assign bound_fu_267_p00 = p_read;

assign bound_fu_267_p1 = bound_fu_267_p10;

assign bound_fu_267_p10 = p_src_mat_rows_dout;

assign bound_fu_267_p2 = (bound_fu_267_p0 * bound_fu_267_p1);

assign call_ln160_write_r_fu_246_ap_start = call_ln160_write_r_fu_246_ap_start_reg;

assign call_ln160_write_r_fu_246_val_V = {{{add_ln214_1_reg_795}, {val_assign_2_fu_614_p4}}, {add_ln156_fu_670_p2}};

assign diff_V_fu_468_p2 = (add_ln214_1_fu_458_p2 + sub_ln214_fu_463_p2);

assign g_V_fu_292_p4 = {{in_pix_V_read_r_fu_253_ap_return[15:8]}};

assign grp_fu_686_p1 = grp_fu_686_p10;

assign grp_fu_686_p10 = diff_V_reg_800;

assign grp_fu_686_p2 = 20'd2048;

assign grp_fu_695_p2 = grp_fu_695_p20;

assign grp_fu_695_p20 = hdiv_q0;

assign hdiv_address0 = zext_ln544_4_fu_474_p1;

assign icmp_ln125_fu_273_p2 = ((indvar_flatten_reg_235 == bound_reg_705) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_498_p2 = ((v_1_fu_443_p2 == zext_ln879_fu_420_p1) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_479_p2 = ((v_1_fu_443_p2 == zext_ln215_1_reg_759) ? 1'b1 : 1'b0);

assign in_pix_V_read_r_fu_253_ap_start = in_pix_V_read_r_fu_253_ap_start_reg;

assign lhs_V_1_fu_395_p1 = vmin_V_1_fu_390_p2;

assign lhs_V_3_fu_288_p1 = b_V_fu_284_p1;

assign p_dst_mat_data_V_din = call_ln160_write_r_fu_246_Mat_9_1080_1920_1_data_V_addr_din;

assign ret_V_10_fu_431_p2 = (rhs_V_2_reg_764 - rhs_V_reg_737_pp0_iter2_reg);

assign ret_V_1_fu_375_p2 = (10'd256 + ret_V_fu_369_p2);

assign ret_V_2_fu_306_p2 = (lhs_V_3_fu_288_p1 - rhs_V_fu_302_p1);

assign ret_V_3_fu_339_p2 = (ret_V_2_fu_306_p2 ^ 9'd256);

assign ret_V_4_fu_399_p2 = (lhs_V_1_fu_395_p1 - rhs_V_2_fu_353_p1);

assign ret_V_5_fu_405_p2 = (ret_V_4_fu_399_p2 ^ 9'd256);

assign ret_V_7_fu_416_p2 = (rhs_V_reg_737_pp0_iter2_reg - lhs_V_3_reg_725_pp0_iter2_reg);

assign ret_V_8_fu_492_p2 = (select_ln148_fu_484_p3 & ret_V_7_fu_416_p2);

assign ret_V_9_fu_423_p2 = (lhs_V_3_reg_725_pp0_iter2_reg - rhs_V_2_reg_764);

assign ret_V_fu_369_p2 = (zext_ln215_1_fu_350_p1 - zext_ln142_1_fu_365_p1);

assign rhs_V_2_fu_353_p1 = r_V_reg_743;

assign rhs_V_fu_302_p1 = g_V_fu_292_p4;

assign sdiv_address0 = zext_ln151_fu_448_p1;

assign select_ln1354_fu_518_p3 = ((xor_ln152_fu_512_p2[0:0] === 1'b1) ? 13'd8191 : 13'd0);

assign select_ln148_fu_484_p3 = ((icmp_ln879_fu_479_p2[0:0] === 1'b1) ? 9'd511 : 9'd0);

assign select_ln149_fu_504_p3 = ((icmp_ln879_1_fu_498_p2[0:0] === 1'b1) ? 11'd2047 : 11'd0);

assign select_ln154_fu_662_p3 = ((tmp_fu_654_p3[0:0] === 1'b1) ? 8'd180 : 8'd0);

assign select_ln215_fu_560_p3 = ((xor_ln152_1_fu_554_p2[0:0] === 1'b1) ? 12'd4095 : 12'd0);

assign sext_ln1353_fu_381_p1 = $signed(ret_V_1_fu_375_p2);

assign sext_ln152_1_fu_435_p1 = $signed(ret_V_10_fu_431_p2);

assign sext_ln152_2_fu_550_p1 = $signed(and_ln152_fu_544_p2);

assign sext_ln152_3_fu_592_p1 = $signed(and_ln152_1_fu_586_p2);

assign sext_ln152_fu_427_p1 = $signed(ret_V_9_fu_423_p2);

assign shl_ln152_1_fu_568_p3 = {{diff_V_fu_468_p2}, {2'd0}};

assign shl_ln_fu_526_p3 = {{diff_V_fu_468_p2}, {1'd0}};

assign sub_ln1354_4_fu_322_p2 = ($signed(9'd256) - $signed(lhs_V_3_fu_288_p1));

assign sub_ln214_fu_463_p2 = (xf_cv_icvSaturate8_q3 - vmin_V_1_reg_785);

assign tmp_fu_654_p3 = add_ln153_fu_633_p2[32'd30];

assign trunc_ln153_fu_630_p1 = grp_fu_695_p3[19:0];

assign trunc_ln_fu_644_p4 = {{add_ln153_1_fu_638_p2[19:12]}};

assign v_1_fu_443_p2 = (zext_ln142_1_reg_775 + zext_ln143_fu_439_p1);

assign v_fu_360_p2 = (zext_ln142_fu_356_p1 + lhs_V_3_reg_725);

assign val_assign_2_fu_614_p4 = {{grp_fu_686_p3[19:12]}};

assign vmin_V_1_fu_390_p2 = (b_V_reg_719 - xf_cv_icvSaturate8_q1);

assign xf_cv_icvSaturate8_address0 = zext_ln544_fu_334_p1;

assign xf_cv_icvSaturate8_address1 = zext_ln544_2_fu_345_p1;

assign xf_cv_icvSaturate8_address2 = zext_ln544_1_fu_385_p1;

assign xf_cv_icvSaturate8_address3 = zext_ln544_3_fu_411_p1;

assign xor_ln152_1_fu_554_p2 = (icmp_ln879_1_fu_498_p2 ^ 1'd1);

assign xor_ln152_fu_512_p2 = (icmp_ln879_fu_479_p2 ^ 1'd1);

assign zext_ln142_1_fu_365_p1 = v_fu_360_p2;

assign zext_ln142_fu_356_p1 = xf_cv_icvSaturate8_q0;

assign zext_ln143_fu_439_p1 = xf_cv_icvSaturate8_q2;

assign zext_ln151_fu_448_p1 = v_1_fu_443_p2;

assign zext_ln152_1_fu_576_p1 = shl_ln152_1_fu_568_p3;

assign zext_ln152_fu_534_p1 = shl_ln_fu_526_p3;

assign zext_ln215_1_fu_350_p1 = r_V_reg_743;

assign zext_ln544_1_fu_385_p1 = $unsigned(sext_ln1353_fu_381_p1);

assign zext_ln544_2_fu_345_p1 = ret_V_3_fu_339_p2;

assign zext_ln544_3_fu_411_p1 = ret_V_5_fu_405_p2;

assign zext_ln544_4_fu_474_p1 = diff_V_fu_468_p2;

assign zext_ln544_fu_334_p1 = add_ln1353_fu_328_p2;

assign zext_ln879_fu_420_p1 = g_V_reg_732_pp0_iter2_reg;

always @ (posedge ap_clk) begin
    lhs_V_3_reg_725[8] <= 1'b0;
    lhs_V_3_reg_725_pp0_iter2_reg[8] <= 1'b0;
    rhs_V_reg_737[8] <= 1'b0;
    rhs_V_reg_737_pp0_iter2_reg[8] <= 1'b0;
    zext_ln215_1_reg_759[9:8] <= 2'b00;
    rhs_V_2_reg_764[8] <= 1'b0;
    zext_ln142_1_reg_775[9] <= 1'b0;
end

endmodule //bgr2hsv_Loop_1_proc



























































































































