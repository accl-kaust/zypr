// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xFinRangeKernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read,
        p_dst_mat_data_V_din,
        p_dst_mat_data_V_full_n,
        p_dst_mat_data_V_write,
        height,
        width
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] p_src_mat_data_V_dout;
input   p_src_mat_data_V_empty_n;
output   p_src_mat_data_V_read;
output  [0:0] p_dst_mat_data_V_din;
input   p_dst_mat_data_V_full_n;
output   p_dst_mat_data_V_write;
input  [15:0] height;
input  [15:0] width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_mat_data_V_read;
reg p_dst_mat_data_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_mat_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln112_reg_294;
reg    p_dst_mat_data_V_blk_n;
reg   [15:0] t_V_reg_151;
wire   [1:0] i_fu_168_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_fu_178_p2;
wire    ap_CS_fsm_state3;
wire   [12:0] i_V_fu_183_p2;
reg   [12:0] i_V_reg_289;
wire   [0:0] icmp_ln112_fu_189_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] add_ln1597_fu_194_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [1:0] i_0_reg_129;
wire   [0:0] icmp_ln99_fu_162_p2;
reg   [12:0] t_V_1_reg_140;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln887_fu_174_p1;
wire   [7:0] trunc_ln647_fu_200_p1;
wire   [7:0] p_Result_i_i_i_i_1_fu_216_p4;
wire   [7:0] p_Result_i_i_i_i_2_fu_232_p4;
wire   [0:0] icmp_ln899_2_fu_226_p2;
wire   [0:0] icmp_ln899_fu_204_p2;
wire   [0:0] icmp_ln899_3_fu_242_p2;
wire   [0:0] icmp_ln899_1_fu_210_p2;
wire   [0:0] and_ln1355_1_fu_254_p2;
wire   [0:0] and_ln1355_fu_248_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln887_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln887_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_129 <= i_fu_168_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_129 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_140 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        t_V_1_reg_140 <= i_V_reg_289;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln112_fu_189_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_reg_151 <= add_ln1597_fu_194_p2;
    end else if (((icmp_ln887_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_reg_151 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_V_reg_289 <= i_V_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln112_reg_294 <= icmp_ln112_fu_189_p2;
    end
end

always @ (*) begin
    if ((icmp_ln112_fu_189_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_mat_data_V_blk_n = p_dst_mat_data_V_full_n;
    end else begin
        p_dst_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln112_reg_294 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dst_mat_data_V_write = 1'b1;
    end else begin
        p_dst_mat_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_294 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_mat_data_V_blk_n = p_src_mat_data_V_empty_n;
    end else begin
        p_src_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln112_reg_294 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_mat_data_V_read = 1'b1;
    end else begin
        p_src_mat_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln99_fu_162_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln887_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln112_fu_189_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln112_fu_189_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1597_fu_194_p2 = (t_V_reg_151 + 16'd1);

assign and_ln1355_1_fu_254_p2 = (icmp_ln899_3_fu_242_p2 & icmp_ln899_1_fu_210_p2);

assign and_ln1355_fu_248_p2 = (icmp_ln899_fu_204_p2 & icmp_ln899_2_fu_226_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln112_reg_294 == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0)) | ((icmp_ln112_reg_294 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln112_reg_294 == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0)) | ((icmp_ln112_reg_294 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln112_reg_294 == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0)) | ((icmp_ln112_reg_294 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0))));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((icmp_ln112_reg_294 == 1'd0) & (p_dst_mat_data_V_full_n == 1'b0)) | ((icmp_ln112_reg_294 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_V_fu_183_p2 = (t_V_1_reg_140 + 13'd1);

assign i_fu_168_p2 = (i_0_reg_129 + 2'd1);

assign icmp_ln112_fu_189_p2 = ((t_V_reg_151 == width) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_178_p2 = ((zext_ln887_fu_174_p1 < height) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_210_p2 = ((trunc_ln647_fu_200_p1 < 8'd127) ? 1'b1 : 1'b0);

assign icmp_ln899_2_fu_226_p2 = ((p_Result_i_i_i_i_1_fu_216_p4 > 8'd19) ? 1'b1 : 1'b0);

assign icmp_ln899_3_fu_242_p2 = ((p_Result_i_i_i_i_2_fu_232_p4 > 8'd14) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_204_p2 = ((trunc_ln647_fu_200_p1 > 8'd93) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_162_p2 = ((i_0_reg_129 == 2'd3) ? 1'b1 : 1'b0);

assign p_Result_i_i_i_i_1_fu_216_p4 = {{p_src_mat_data_V_dout[15:8]}};

assign p_Result_i_i_i_i_2_fu_232_p4 = {{p_src_mat_data_V_dout[23:16]}};

assign p_dst_mat_data_V_din = (and_ln1355_fu_248_p2 & and_ln1355_1_fu_254_p2);

assign trunc_ln647_fu_200_p1 = p_src_mat_data_V_dout[7:0];

assign zext_ln887_fu_174_p1 = t_V_1_reg_140;

endmodule //xFinRangeKernel















































































































