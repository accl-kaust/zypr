// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xfMat2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_rows_dout,
        img_rows_empty_n,
        img_rows_read,
        img_cols_dout,
        img_cols_empty_n,
        img_cols_read,
        img_data_V_dout,
        img_data_V_empty_n,
        img_data_V_read,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST,
        output_r_TID,
        output_r_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] img_rows_dout;
input   img_rows_empty_n;
output   img_rows_read;
input  [15:0] img_cols_dout;
input   img_cols_empty_n;
output   img_cols_read;
input  [7:0] img_data_V_dout;
input   img_data_V_empty_n;
output   img_data_V_read;
output  [63:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [7:0] output_r_TKEEP;
output  [7:0] output_r_TSTRB;
output  [0:0] output_r_TUSER;
output  [0:0] output_r_TLAST;
output  [0:0] output_r_TID;
output  [0:0] output_r_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_rows_read;
reg img_cols_read;
reg img_data_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_rows_blk_n;
reg    img_cols_blk_n;
reg    img_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln197_reg_366;
reg    output_r_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln197_reg_366_pp0_iter1_reg;
reg   [20:0] index_assign_reg_202;
reg   [10:0] j_0_i_reg_212;
reg   [15:0] img_rows_read_reg_327;
reg    ap_block_state1;
wire   [16:0] extLd5_cast7_i_fu_227_p1;
wire   [20:0] smax_cast_i_fu_231_p1;
reg   [20:0] smax_cast_i_reg_337;
wire   [16:0] add_ln209_fu_235_p2;
reg   [16:0] add_ln209_reg_342;
wire   [16:0] empty_9_fu_241_p1;
reg   [16:0] empty_9_reg_347;
wire   [0:0] icmp_ln195_fu_254_p2;
wire    ap_CS_fsm_state2;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [10:0] i_fu_259_p2;
reg   [10:0] i_reg_356;
wire   [20:0] idx_fu_265_p2;
reg   [20:0] idx_reg_361;
wire   [0:0] icmp_ln197_fu_278_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_fu_284_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_290_p2;
reg   [0:0] tmp_last_V_reg_375;
wire   [20:0] add_ln216_fu_295_p2;
wire   [16:0] add_ln195_fu_315_p2;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [16:0] indvars_iv_reg_169;
reg   [20:0] idx_0_i_reg_179;
reg   [10:0] i_0_i_reg_191;
reg   [0:0] tmp_user_V_fu_118;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] empty_fu_223_p1;
wire   [15:0] zext_ln195_fu_250_p1;
wire   [16:0] trunc_ln197_fu_274_p1;
wire   [16:0] zext_ln197_fu_270_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] output_r_TDATA_int;
reg    output_r_TVALID_int;
wire    output_r_TREADY_int;
wire    regslice_both_AXI_video_strm_V_data_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

regslice_both #(
    .DataWidth( 64 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(output_r_TDATA_int),
    .vld_in(output_r_TVALID_int),
    .ack_in(output_r_TREADY_int),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_AXI_video_strm_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(8'd255),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(8'd0),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_user_V_fu_118),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_last_V_reg_375),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy),
    .data_out(output_r_TID),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy),
    .data_out(output_r_TDEST),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln195_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln195_fu_254_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln195_fu_254_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_191 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_i_reg_191 <= i_reg_356;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        idx_0_i_reg_179 <= 21'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        idx_0_i_reg_179 <= idx_reg_361;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln197_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        index_assign_reg_202 <= add_ln216_fu_295_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln195_fu_254_p2 == 1'd1))) begin
        index_assign_reg_202 <= idx_0_i_reg_179;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvars_iv_reg_169 <= extLd5_cast7_i_fu_227_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvars_iv_reg_169 <= add_ln195_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln197_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_i_reg_212 <= j_fu_284_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln195_fu_254_p2 == 1'd1))) begin
        j_0_i_reg_212 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln197_reg_366 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_user_V_fu_118 <= 1'd0;
    end else if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_118 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln209_reg_342 <= add_ln209_fu_235_p2;
        empty_9_reg_347[10 : 0] <= empty_9_fu_241_p1[10 : 0];
        img_rows_read_reg_327 <= img_rows_dout;
        smax_cast_i_reg_337[10 : 0] <= smax_cast_i_fu_231_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        i_reg_356 <= i_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln197_reg_366 <= icmp_ln197_fu_278_p2;
        icmp_ln197_reg_366_pp0_iter1_reg <= icmp_ln197_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln195_fu_254_p2 == 1'd1))) begin
        idx_reg_361 <= idx_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln197_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_375 <= tmp_last_V_fu_290_p2;
    end
end

always @ (*) begin
    if ((icmp_ln197_fu_278_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln195_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln195_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_blk_n = img_cols_empty_n;
    end else begin
        img_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_read = 1'b1;
    end else begin
        img_cols_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_366 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_data_V_blk_n = img_data_V_empty_n;
    end else begin
        img_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_366 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_data_V_read = 1'b1;
    end else begin
        img_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_blk_n = img_rows_empty_n;
    end else begin
        img_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_read = 1'b1;
    end else begin
        img_rows_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln197_reg_366_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln197_reg_366 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_366 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_r_TVALID_int = 1'b1;
    end else begin
        output_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln195_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (icmp_ln195_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln197_fu_278_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln197_fu_278_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln195_fu_315_p2 = (empty_9_reg_347 + indvars_iv_reg_169);

assign add_ln209_fu_235_p2 = ($signed(17'd131071) + $signed(extLd5_cast7_i_fu_227_p1));

assign add_ln216_fu_295_p2 = (index_assign_reg_202 + 21'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln197_reg_366 == 1'd0) & (img_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln197_reg_366 == 1'd0) & (img_data_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln197_reg_366 == 1'd0) & (img_data_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln197_reg_366 == 1'd0) & (output_r_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln197_reg_366 == 1'd0) & (img_data_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_io = ((icmp_ln197_reg_366_pp0_iter1_reg == 1'd0) & (output_r_TREADY_int == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_9_fu_241_p1 = empty_fu_223_p1;

assign empty_fu_223_p1 = img_cols_dout[10:0];

assign extLd5_cast7_i_fu_227_p1 = img_cols_dout;

assign i_fu_259_p2 = (i_0_i_reg_191 + 11'd1);

assign icmp_ln195_fu_254_p2 = ((zext_ln195_fu_250_p1 < img_rows_read_reg_327) ? 1'b1 : 1'b0);

assign icmp_ln197_fu_278_p2 = ((trunc_ln197_fu_274_p1 == indvars_iv_reg_169) ? 1'b1 : 1'b0);

assign idx_fu_265_p2 = (smax_cast_i_reg_337 + idx_0_i_reg_179);

assign j_fu_284_p2 = (11'd1 + j_0_i_reg_212);

assign output_r_TDATA_int = img_data_V_dout;

assign output_r_TVALID = regslice_both_AXI_video_strm_V_data_V_U_vld_out;

assign smax_cast_i_fu_231_p1 = empty_fu_223_p1;

assign tmp_last_V_fu_290_p2 = ((zext_ln197_fu_270_p1 == add_ln209_reg_342) ? 1'b1 : 1'b0);

assign trunc_ln197_fu_274_p1 = index_assign_reg_202[16:0];

assign zext_ln195_fu_250_p1 = i_0_i_reg_191;

assign zext_ln197_fu_270_p1 = j_0_i_reg_212;

always @ (posedge ap_clk) begin
    smax_cast_i_reg_337[20:11] <= 10'b0000000000;
    empty_9_reg_347[16:11] <= 6'b000000;
end

endmodule //xfMat2AXIvideo








































































































































































































