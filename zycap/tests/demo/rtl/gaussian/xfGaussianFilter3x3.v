// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xfGaussianFilter3x3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_src_mat_data_V_dout,
        p_src_mat_data_V_empty_n,
        p_src_mat_data_V_read,
        p_out_mat_data_V_din,
        p_out_mat_data_V_full_n,
        p_out_mat_data_V_write,
        img_height,
        img_width,
        weights_0_read,
        weights_1_read
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state4 = 7'd4;
parameter    ap_ST_fsm_state5 = 7'd8;
parameter    ap_ST_fsm_pp1_stage0 = 7'd16;
parameter    ap_ST_fsm_state12 = 7'd32;
parameter    ap_ST_fsm_state13 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_src_mat_data_V_dout;
input   p_src_mat_data_V_empty_n;
output   p_src_mat_data_V_read;
output  [7:0] p_out_mat_data_V_din;
input   p_out_mat_data_V_full_n;
output   p_out_mat_data_V_write;
input  [15:0] img_height;
input  [15:0] img_width;
input  [7:0] weights_0_read;
input  [7:0] weights_1_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_mat_data_V_read;
reg p_out_mat_data_V_write;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_mat_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln467_reg_734;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln887_2_reg_799;
reg   [0:0] icmp_ln887_1_reg_795;
reg    p_out_mat_data_V_blk_n;
reg    ap_enable_reg_pp1_iter5;
reg   [0:0] icmp_ln879_3_reg_815;
reg   [0:0] icmp_ln879_3_reg_815_pp1_iter4_reg;
wire    ap_CS_fsm_state13;
reg   [15:0] index_assign_reg_287;
reg   [12:0] t_V_reg_298;
reg   [12:0] t_V_3_reg_333;
reg   [7:0] src_buf3_V_0_0_reg_345;
reg   [7:0] src_buf2_0_V_reg_357;
reg   [7:0] src_buf2_0_V_reg_357_pp1_iter4_reg;
wire    ap_block_state6_pp1_stage0_iter0;
reg    ap_predicate_op100_read_state7;
reg    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_state8_pp1_stage0_iter2;
wire    ap_block_state9_pp1_stage0_iter3;
wire    ap_block_state10_pp1_stage0_iter4;
reg    ap_block_state11_pp1_stage0_iter5;
reg    ap_block_pp1_stage0_11001;
reg   [7:0] src_buf2_V_0_0_reg_369;
reg   [7:0] src_buf3_0_V_reg_382;
reg   [7:0] src_buf3_0_V_reg_382_pp1_iter4_reg;
reg   [7:0] src_buf1_0_V_reg_395;
reg   [7:0] src_buf1_0_V_reg_395_pp1_iter4_reg;
reg   [7:0] src_buf1_V_0_0_reg_407;
wire   [0:0] icmp_ln467_fu_445_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] read_index_fu_450_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] zext_ln544_fu_456_p1;
reg   [63:0] zext_ln544_reg_743;
wire   [12:0] col_V_fu_461_p2;
wire   [16:0] add_ln479_fu_470_p2;
reg   [16:0] add_ln479_reg_771;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln887_fu_480_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] select_ln879_fu_562_p3;
reg   [1:0] select_ln879_reg_780;
wire   [1:0] select_ln879_2_fu_578_p3;
reg   [1:0] select_ln879_2_reg_785;
wire   [1:0] select_ln879_4_fu_594_p3;
reg   [1:0] select_ln879_4_reg_790;
wire   [0:0] icmp_ln887_1_fu_602_p2;
wire   [0:0] icmp_ln887_2_fu_626_p2;
reg   [0:0] icmp_ln887_2_reg_799_pp1_iter1_reg;
reg   [0:0] icmp_ln887_2_reg_799_pp1_iter2_reg;
reg   [0:0] icmp_ln887_2_reg_799_pp1_iter3_reg;
reg   [0:0] icmp_ln887_2_reg_799_pp1_iter4_reg;
wire   [12:0] col_V_1_fu_631_p2;
reg   [12:0] col_V_1_reg_803;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln544_1_fu_637_p1;
reg   [63:0] zext_ln544_1_reg_808;
wire   [0:0] icmp_ln879_3_fu_647_p2;
reg   [0:0] icmp_ln879_3_reg_815_pp1_iter2_reg;
reg   [0:0] icmp_ln879_3_reg_815_pp1_iter3_reg;
wire   [7:0] buf0_V_fu_653_p5;
reg   [7:0] buf0_V_reg_834;
reg    ap_enable_reg_pp1_iter3;
wire   [7:0] buf1_V_fu_664_p5;
reg   [7:0] buf1_V_reg_840;
wire   [7:0] buf2_V_fu_675_p5;
reg   [7:0] buf2_V_reg_846;
wire   [12:0] select_ln540_fu_698_p3;
reg   [12:0] select_ln540_reg_852;
wire    ap_CS_fsm_state12;
wire   [12:0] row_V_fu_706_p2;
reg   [12:0] row_V_reg_857;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
reg    ap_condition_pp1_exit_iter3_state9;
wire   [10:0] buf_0_V_address0;
reg    buf_0_V_ce0;
wire   [7:0] buf_0_V_q0;
reg   [10:0] buf_0_V_address1;
reg    buf_0_V_ce1;
reg    buf_0_V_we1;
reg   [7:0] buf_0_V_d1;
wire   [10:0] buf_1_V_address0;
reg    buf_1_V_ce0;
wire   [7:0] buf_1_V_q0;
reg   [10:0] buf_1_V_address1;
reg    buf_1_V_ce1;
reg    buf_1_V_we1;
reg   [7:0] buf_1_V_d1;
wire   [10:0] buf_2_V_address0;
reg    buf_2_V_ce0;
wire   [7:0] buf_2_V_q0;
reg   [10:0] buf_2_V_address1;
reg    buf_2_V_ce1;
reg    buf_2_V_we1;
reg   [7:0] buf_2_V_d1;
reg   [7:0] grp_xFapplygaussian3x3_fu_420_D1_V;
reg   [7:0] grp_xFapplygaussian3x3_fu_420_D3_V;
reg   [7:0] grp_xFapplygaussian3x3_fu_420_D4_V;
reg   [7:0] grp_xFapplygaussian3x3_fu_420_D6_V;
reg   [7:0] grp_xFapplygaussian3x3_fu_420_D7_V;
reg   [7:0] grp_xFapplygaussian3x3_fu_420_D9_V;
wire   [7:0] grp_xFapplygaussian3x3_fu_420_ap_return;
reg    grp_xFapplygaussian3x3_fu_420_ap_ce;
wire    ap_block_state6_pp1_stage0_iter0_ignore_call9;
reg    ap_block_state7_pp1_stage0_iter1_ignore_call9;
wire    ap_block_state8_pp1_stage0_iter2_ignore_call9;
wire    ap_block_state9_pp1_stage0_iter3_ignore_call9;
wire    ap_block_state10_pp1_stage0_iter4_ignore_call9;
reg    ap_block_state11_pp1_stage0_iter5_ignore_call9;
reg    ap_block_pp1_stage0_11001_ignoreCallOp132;
reg   [12:0] t_V_1_reg_309;
reg   [12:0] t_V_2_reg_321;
reg   [12:0] ap_phi_mux_t_V_3_phi_fu_337_p4;
reg   [7:0] ap_phi_mux_src_buf3_V_0_0_phi_fu_349_p4;
reg   [7:0] ap_phi_mux_src_buf2_V_0_0_phi_fu_373_p4;
reg   [7:0] ap_phi_mux_src_buf1_V_0_0_phi_fu_411_p4;
wire   [10:0] buf_0_V_addr_1_gep_fu_243_p3;
wire   [10:0] buf_1_V_addr_1_gep_fu_249_p3;
wire   [10:0] buf_2_V_addr_gep_fu_255_p3;
reg   [1:0] p_0273_0_fu_128;
reg   [1:0] p_0607_0_fu_132;
reg   [1:0] p_0586_0_fu_136;
reg    ap_block_pp1_stage0_01001;
wire   [16:0] zext_ln479_fu_467_p1;
wire   [16:0] zext_ln887_1_fu_476_p1;
wire   [0:0] icmp_ln879_2_fu_510_p2;
wire   [0:0] icmp_ln879_fu_498_p2;
wire   [0:0] icmp_ln879_1_fu_504_p2;
wire   [0:0] xor_ln879_fu_540_p2;
wire   [0:0] and_ln879_fu_546_p2;
wire   [0:0] or_ln879_fu_556_p2;
wire   [1:0] zext_ln879_fu_552_p1;
wire   [1:0] select_ln491_fu_516_p3;
wire   [1:0] select_ln879_1_fu_570_p3;
wire   [1:0] select_ln491_1_fu_524_p3;
wire   [1:0] select_ln879_3_fu_586_p3;
wire   [1:0] select_ln491_2_fu_532_p3;
wire   [15:0] zext_ln887_fu_494_p1;
wire   [15:0] zext_ln887_2_fu_622_p1;
wire   [12:0] row_ind_V_fu_686_p2;
wire   [0:0] icmp_ln879_4_fu_692_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_629;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
end

xfGaussianFilter3fYi #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
buf_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_0_V_address0),
    .ce0(buf_0_V_ce0),
    .q0(buf_0_V_q0),
    .address1(buf_0_V_address1),
    .ce1(buf_0_V_ce1),
    .we1(buf_0_V_we1),
    .d1(buf_0_V_d1)
);

xfGaussianFilter3fYi #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
buf_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_1_V_address0),
    .ce0(buf_1_V_ce0),
    .q0(buf_1_V_q0),
    .address1(buf_1_V_address1),
    .ce1(buf_1_V_ce1),
    .we1(buf_1_V_we1),
    .d1(buf_1_V_d1)
);

xfGaussianFilter3fYi #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
buf_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_2_V_address0),
    .ce0(buf_2_V_ce0),
    .q0(buf_2_V_q0),
    .address1(buf_2_V_address1),
    .ce1(buf_2_V_ce1),
    .we1(buf_2_V_we1),
    .d1(buf_2_V_d1)
);

xFapplygaussian3x3 grp_xFapplygaussian3x3_fu_420(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .D1_V(grp_xFapplygaussian3x3_fu_420_D1_V),
    .D2_V(src_buf1_0_V_reg_395),
    .D3_V(grp_xFapplygaussian3x3_fu_420_D3_V),
    .D4_V(grp_xFapplygaussian3x3_fu_420_D4_V),
    .D5_V(src_buf2_0_V_reg_357),
    .D6_V(grp_xFapplygaussian3x3_fu_420_D6_V),
    .D7_V(grp_xFapplygaussian3x3_fu_420_D7_V),
    .D8_V(src_buf3_0_V_reg_382),
    .D9_V(grp_xFapplygaussian3x3_fu_420_D9_V),
    .weights_0_read(weights_0_read),
    .weights_1_read(weights_1_read),
    .ap_return(grp_xFapplygaussian3x3_fu_420_ap_return),
    .ap_ce(grp_xFapplygaussian3x3_fu_420_ap_ce)
);

gaussian_mux_32_8ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
gaussian_mux_32_8ibs_U37(
    .din0(buf_0_V_q0),
    .din1(buf_1_V_q0),
    .din2(buf_2_V_q0),
    .din3(select_ln879_reg_780),
    .dout(buf0_V_fu_653_p5)
);

gaussian_mux_32_8ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
gaussian_mux_32_8ibs_U38(
    .din0(buf_0_V_q0),
    .din1(buf_1_V_q0),
    .din2(buf_2_V_q0),
    .din3(select_ln879_2_reg_785),
    .dout(buf1_V_fu_664_p5)
);

gaussian_mux_32_8ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
gaussian_mux_32_8ibs_U39(
    .din0(buf_0_V_q0),
    .din1(buf_1_V_q0),
    .din2(buf_2_V_q0),
    .din3(select_ln879_4_reg_790),
    .dout(buf2_V_fu_675_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln887_2_fu_626_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter3_state9)) begin
                ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter2;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln467_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        index_assign_reg_287 <= read_index_fu_450_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        index_assign_reg_287 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        src_buf1_0_V_reg_395 <= buf0_V_reg_834;
    end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        src_buf1_0_V_reg_395 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799_pp1_iter4_reg == 1'd1) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        src_buf1_V_0_0_reg_407 <= src_buf1_0_V_reg_395_pp1_iter4_reg;
    end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        src_buf1_V_0_0_reg_407 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        src_buf2_0_V_reg_357 <= buf1_V_reg_840;
    end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        src_buf2_0_V_reg_357 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799_pp1_iter4_reg == 1'd1) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        src_buf2_V_0_0_reg_369 <= src_buf2_0_V_reg_357_pp1_iter4_reg;
    end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        src_buf2_V_0_0_reg_369 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        src_buf3_0_V_reg_382 <= buf2_V_reg_846;
    end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        src_buf3_0_V_reg_382 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799_pp1_iter4_reg == 1'd1) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        src_buf3_V_0_0_reg_345 <= src_buf3_0_V_reg_382_pp1_iter4_reg;
    end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        src_buf3_V_0_0_reg_345 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((p_out_mat_data_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        t_V_1_reg_309 <= select_ln540_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_V_1_reg_309 <= 13'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((p_out_mat_data_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        t_V_2_reg_321 <= row_V_reg_857;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        t_V_2_reg_321 <= 13'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        t_V_3_reg_333 <= col_V_1_reg_803;
    end else if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_V_3_reg_333 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln467_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_reg_298 <= col_V_fu_461_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_reg_298 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln479_reg_771 <= add_ln479_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799_pp1_iter2_reg == 1'd1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        buf0_V_reg_834 <= buf0_V_fu_653_p5;
        buf1_V_reg_840 <= buf1_V_fu_664_p5;
        buf2_V_reg_846 <= buf2_V_fu_675_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        col_V_1_reg_803 <= col_V_1_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln467_reg_734 <= icmp_ln467_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_reg_799 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln879_3_reg_815 <= icmp_ln879_3_fu_647_p2;
        zext_ln544_1_reg_808[12 : 0] <= zext_ln544_1_fu_637_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln879_3_reg_815_pp1_iter2_reg <= icmp_ln879_3_reg_815;
        icmp_ln879_3_reg_815_pp1_iter3_reg <= icmp_ln879_3_reg_815_pp1_iter2_reg;
        icmp_ln879_3_reg_815_pp1_iter4_reg <= icmp_ln879_3_reg_815_pp1_iter3_reg;
        icmp_ln887_2_reg_799_pp1_iter2_reg <= icmp_ln887_2_reg_799_pp1_iter1_reg;
        icmp_ln887_2_reg_799_pp1_iter3_reg <= icmp_ln887_2_reg_799_pp1_iter2_reg;
        icmp_ln887_2_reg_799_pp1_iter4_reg <= icmp_ln887_2_reg_799_pp1_iter3_reg;
        src_buf1_0_V_reg_395_pp1_iter4_reg <= src_buf1_0_V_reg_395;
        src_buf2_0_V_reg_357_pp1_iter4_reg <= src_buf2_0_V_reg_357;
        src_buf3_0_V_reg_382_pp1_iter4_reg <= src_buf3_0_V_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln887_1_reg_795 <= icmp_ln887_1_fu_602_p2;
        p_0273_0_fu_128 <= select_ln879_4_fu_594_p3;
        p_0586_0_fu_136 <= select_ln879_fu_562_p3;
        p_0607_0_fu_132 <= select_ln879_2_fu_578_p3;
        select_ln879_2_reg_785 <= select_ln879_2_fu_578_p3;
        select_ln879_4_reg_790 <= select_ln879_4_fu_594_p3;
        select_ln879_reg_780 <= select_ln879_fu_562_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln887_2_reg_799 <= icmp_ln887_2_fu_626_p2;
        icmp_ln887_2_reg_799_pp1_iter1_reg <= icmp_ln887_2_reg_799;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        row_V_reg_857 <= row_V_fu_706_p2;
        select_ln540_reg_852 <= select_ln540_fu_698_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln467_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln544_reg_743[12 : 0] <= zext_ln544_fu_456_p1[12 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln467_fu_445_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ap_condition_pp1_exit_iter3_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter3_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_2_reg_799_pp1_iter4_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        ap_phi_mux_src_buf1_V_0_0_phi_fu_411_p4 = src_buf1_0_V_reg_395_pp1_iter4_reg;
    end else begin
        ap_phi_mux_src_buf1_V_0_0_phi_fu_411_p4 = src_buf1_V_0_0_reg_407;
    end
end

always @ (*) begin
    if (((icmp_ln887_2_reg_799_pp1_iter4_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        ap_phi_mux_src_buf2_V_0_0_phi_fu_373_p4 = src_buf2_0_V_reg_357_pp1_iter4_reg;
    end else begin
        ap_phi_mux_src_buf2_V_0_0_phi_fu_373_p4 = src_buf2_V_0_0_reg_369;
    end
end

always @ (*) begin
    if (((icmp_ln887_2_reg_799_pp1_iter4_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter5 == 1'b1))) begin
        ap_phi_mux_src_buf3_V_0_0_phi_fu_349_p4 = src_buf3_0_V_reg_382_pp1_iter4_reg;
    end else begin
        ap_phi_mux_src_buf3_V_0_0_phi_fu_349_p4 = src_buf3_V_0_0_reg_345;
    end
end

always @ (*) begin
    if (((icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_t_V_3_phi_fu_337_p4 = col_V_1_reg_803;
    end else begin
        ap_phi_mux_t_V_3_phi_fu_337_p4 = t_V_3_reg_333;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd0))) begin
        buf_0_V_address1 = buf_0_V_addr_1_gep_fu_243_p3;
    end else if (((icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd0))) begin
        buf_0_V_address1 = zext_ln544_1_fu_637_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_0_V_address1 = zext_ln544_fu_456_p1;
    end else begin
        buf_0_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        buf_0_V_ce0 = 1'b1;
    end else begin
        buf_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln887_2_reg_799 == 1'd1) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        buf_0_V_ce1 = 1'b1;
    end else begin
        buf_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd0))) begin
        buf_0_V_d1 = p_src_mat_data_V_dout;
    end else if ((((icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        buf_0_V_d1 = 8'd0;
    end else begin
        buf_0_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln887_2_reg_799 == 1'd1) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln467_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        buf_0_V_we1 = 1'b1;
    end else begin
        buf_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd1))) begin
        buf_1_V_address1 = buf_1_V_addr_1_gep_fu_249_p3;
    end else if (((icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd1))) begin
        buf_1_V_address1 = zext_ln544_1_fu_637_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_1_V_address1 = zext_ln544_reg_743;
    end else begin
        buf_1_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        buf_1_V_ce0 = 1'b1;
    end else begin
        buf_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln887_2_reg_799 == 1'd1) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        buf_1_V_ce1 = 1'b1;
    end else begin
        buf_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd1))) begin
        buf_1_V_d1 = 8'd0;
    end else if ((((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_1_V_d1 = p_src_mat_data_V_dout;
    end else begin
        buf_1_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln887_2_reg_799 == 1'd1) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (select_ln879_4_reg_790 == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln467_reg_734 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        buf_1_V_we1 = 1'b1;
    end else begin
        buf_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_629)) begin
        if ((icmp_ln887_1_reg_795 == 1'd1)) begin
            buf_2_V_address1 = buf_2_V_addr_gep_fu_255_p3;
        end else if ((icmp_ln887_1_reg_795 == 1'd0)) begin
            buf_2_V_address1 = zext_ln544_1_fu_637_p1;
        end else begin
            buf_2_V_address1 = 'bx;
        end
    end else begin
        buf_2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        buf_2_V_ce0 = 1'b1;
    end else begin
        buf_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((~(select_ln879_4_reg_790 == 2'd1) & ~(select_ln879_4_reg_790 == 2'd0) & (icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | (~(select_ln879_4_reg_790 == 2'd1) & ~(select_ln879_4_reg_790 == 2'd0) & (icmp_ln887_2_reg_799 == 1'd1) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buf_2_V_ce1 = 1'b1;
    end else begin
        buf_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_629)) begin
        if ((icmp_ln887_1_reg_795 == 1'd1)) begin
            buf_2_V_d1 = p_src_mat_data_V_dout;
        end else if ((icmp_ln887_1_reg_795 == 1'd0)) begin
            buf_2_V_d1 = 8'd0;
        end else begin
            buf_2_V_d1 = 'bx;
        end
    end else begin
        buf_2_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((~(select_ln879_4_reg_790 == 2'd1) & ~(select_ln879_4_reg_790 == 2'd0) & (icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | (~(select_ln879_4_reg_790 == 2'd1) & ~(select_ln879_4_reg_790 == 2'd0) & (icmp_ln887_2_reg_799 == 1'd1) & (icmp_ln887_1_reg_795 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buf_2_V_we1 = 1'b1;
    end else begin
        buf_2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_xFapplygaussian3x3_fu_420_D1_V = src_buf1_V_0_0_reg_407;
    end else if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        grp_xFapplygaussian3x3_fu_420_D1_V = ap_phi_mux_src_buf1_V_0_0_phi_fu_411_p4;
    end else begin
        grp_xFapplygaussian3x3_fu_420_D1_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_xFapplygaussian3x3_fu_420_D3_V = 8'd0;
    end else if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        grp_xFapplygaussian3x3_fu_420_D3_V = buf0_V_reg_834;
    end else begin
        grp_xFapplygaussian3x3_fu_420_D3_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_xFapplygaussian3x3_fu_420_D4_V = src_buf2_V_0_0_reg_369;
    end else if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        grp_xFapplygaussian3x3_fu_420_D4_V = ap_phi_mux_src_buf2_V_0_0_phi_fu_373_p4;
    end else begin
        grp_xFapplygaussian3x3_fu_420_D4_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_xFapplygaussian3x3_fu_420_D6_V = 8'd0;
    end else if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        grp_xFapplygaussian3x3_fu_420_D6_V = buf1_V_reg_840;
    end else begin
        grp_xFapplygaussian3x3_fu_420_D6_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_xFapplygaussian3x3_fu_420_D7_V = src_buf3_V_0_0_reg_345;
    end else if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        grp_xFapplygaussian3x3_fu_420_D7_V = ap_phi_mux_src_buf3_V_0_0_phi_fu_349_p4;
    end else begin
        grp_xFapplygaussian3x3_fu_420_D7_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_xFapplygaussian3x3_fu_420_D9_V = 8'd0;
    end else if (((icmp_ln887_2_reg_799_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        grp_xFapplygaussian3x3_fu_420_D9_V = buf2_V_reg_846;
    end else begin
        grp_xFapplygaussian3x3_fu_420_D9_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((p_out_mat_data_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_pp1_stage0_11001_ignoreCallOp132) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        grp_xFapplygaussian3x3_fu_420_ap_ce = 1'b1;
    end else begin
        grp_xFapplygaussian3x3_fu_420_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln879_3_reg_815_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
        p_out_mat_data_V_blk_n = p_out_mat_data_V_full_n;
    end else begin
        p_out_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((p_out_mat_data_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln879_3_reg_815_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        p_out_mat_data_V_write = 1'b1;
    end else begin
        p_out_mat_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln467_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_src_mat_data_V_blk_n = p_src_mat_data_V_empty_n;
    end else begin
        p_src_mat_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op100_read_state7 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln467_reg_734 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        p_src_mat_data_V_read = 1'b1;
    end else begin
        p_src_mat_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln467_fu_445_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln467_fu_445_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln887_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) & ~((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((p_out_mat_data_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln479_fu_470_p2 = (zext_ln479_fu_467_p1 + 17'd1);

assign and_ln879_fu_546_p2 = (xor_ln879_fu_540_p2 & icmp_ln879_1_fu_504_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln467_reg_734 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln467_reg_734 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln879_3_reg_815_pp1_iter4_reg == 1'd0) & (p_out_mat_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_predicate_op100_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln879_3_reg_815_pp1_iter4_reg == 1'd0) & (p_out_mat_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_predicate_op100_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001_ignoreCallOp132 = (((icmp_ln879_3_reg_815_pp1_iter4_reg == 1'd0) & (p_out_mat_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_predicate_op100_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln879_3_reg_815_pp1_iter4_reg == 1'd0) & (p_out_mat_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((p_src_mat_data_V_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (ap_predicate_op100_read_state7 == 1'b1)));
end

assign ap_block_state10_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter4_ignore_call9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp1_stage0_iter5 = ((icmp_ln879_3_reg_815_pp1_iter4_reg == 1'd0) & (p_out_mat_data_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp1_stage0_iter5_ignore_call9 = ((icmp_ln879_3_reg_815_pp1_iter4_reg == 1'd0) & (p_out_mat_data_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln467_reg_734 == 1'd0) & (p_src_mat_data_V_empty_n == 1'b0));
end

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0_ignore_call9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((p_src_mat_data_V_empty_n == 1'b0) & (ap_predicate_op100_read_state7 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1_ignore_call9 = ((p_src_mat_data_V_empty_n == 1'b0) & (ap_predicate_op100_read_state7 == 1'b1));
end

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter2_ignore_call9 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter3_ignore_call9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_629 = (~(select_ln879_4_reg_790 == 2'd1) & ~(select_ln879_4_reg_790 == 2'd0) & (icmp_ln887_2_reg_799 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_op100_read_state7 = ((icmp_ln887_1_reg_795 == 1'd1) & (icmp_ln887_2_reg_799 == 1'd1));
end

assign buf_0_V_addr_1_gep_fu_243_p3 = zext_ln544_1_fu_637_p1;

assign buf_0_V_address0 = zext_ln544_1_reg_808;

assign buf_1_V_addr_1_gep_fu_249_p3 = zext_ln544_1_fu_637_p1;

assign buf_1_V_address0 = zext_ln544_1_reg_808;

assign buf_2_V_addr_gep_fu_255_p3 = zext_ln544_1_fu_637_p1;

assign buf_2_V_address0 = zext_ln544_1_reg_808;

assign col_V_1_fu_631_p2 = (ap_phi_mux_t_V_3_phi_fu_337_p4 + 13'd1);

assign col_V_fu_461_p2 = (t_V_reg_298 + 13'd1);

assign icmp_ln467_fu_445_p2 = ((index_assign_reg_287 == img_width) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_504_p2 = ((t_V_1_reg_309 == 13'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_510_p2 = ((t_V_1_reg_309 == 13'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_647_p2 = ((t_V_3_reg_333 == 13'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_692_p2 = ((row_ind_V_fu_686_p2 == 13'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_498_p2 = ((t_V_1_reg_309 == 13'd2) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_602_p2 = ((zext_ln887_fu_494_p1 < img_height) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_626_p2 = ((zext_ln887_2_fu_622_p1 < img_width) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_480_p2 = ((zext_ln887_1_fu_476_p1 < add_ln479_reg_771) ? 1'b1 : 1'b0);

assign or_ln879_fu_556_p2 = (icmp_ln879_fu_498_p2 | and_ln879_fu_546_p2);

assign p_out_mat_data_V_din = grp_xFapplygaussian3x3_fu_420_ap_return;

assign read_index_fu_450_p2 = (index_assign_reg_287 + 16'd1);

assign row_V_fu_706_p2 = (t_V_2_reg_321 + 13'd1);

assign row_ind_V_fu_686_p2 = (t_V_1_reg_309 + 13'd1);

assign select_ln491_1_fu_524_p3 = ((icmp_ln879_2_fu_510_p2[0:0] === 1'b1) ? 2'd0 : p_0607_0_fu_132);

assign select_ln491_2_fu_532_p3 = ((icmp_ln879_2_fu_510_p2[0:0] === 1'b1) ? 2'd1 : p_0273_0_fu_128);

assign select_ln491_fu_516_p3 = ((icmp_ln879_2_fu_510_p2[0:0] === 1'b1) ? 2'd2 : p_0586_0_fu_136);

assign select_ln540_fu_698_p3 = ((icmp_ln879_4_fu_692_p2[0:0] === 1'b1) ? 13'd0 : row_ind_V_fu_686_p2);

assign select_ln879_1_fu_570_p3 = ((and_ln879_fu_546_p2[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign select_ln879_2_fu_578_p3 = ((or_ln879_fu_556_p2[0:0] === 1'b1) ? select_ln879_1_fu_570_p3 : select_ln491_1_fu_524_p3);

assign select_ln879_3_fu_586_p3 = ((and_ln879_fu_546_p2[0:0] === 1'b1) ? 2'd0 : 2'd2);

assign select_ln879_4_fu_594_p3 = ((or_ln879_fu_556_p2[0:0] === 1'b1) ? select_ln879_3_fu_586_p3 : select_ln491_2_fu_532_p3);

assign select_ln879_fu_562_p3 = ((or_ln879_fu_556_p2[0:0] === 1'b1) ? zext_ln879_fu_552_p1 : select_ln491_fu_516_p3);

assign xor_ln879_fu_540_p2 = (icmp_ln879_fu_498_p2 ^ 1'd1);

assign zext_ln479_fu_467_p1 = img_height;

assign zext_ln544_1_fu_637_p1 = t_V_3_reg_333;

assign zext_ln544_fu_456_p1 = t_V_reg_298;

assign zext_ln879_fu_552_p1 = and_ln879_fu_546_p2;

assign zext_ln887_1_fu_476_p1 = t_V_2_reg_321;

assign zext_ln887_2_fu_622_p1 = ap_phi_mux_t_V_3_phi_fu_337_p4;

assign zext_ln887_fu_494_p1 = t_V_2_reg_321;

always @ (posedge ap_clk) begin
    zext_ln544_reg_743[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln544_1_reg_808[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //xfGaussianFilter3x3




































































































