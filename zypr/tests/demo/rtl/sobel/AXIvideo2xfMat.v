// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIvideo2xfMat (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TUSER,
        input_r_TLAST,
        input_r_TID,
        input_r_TDEST,
        img_rows_dout,
        img_rows_empty_n,
        img_rows_read,
        img_cols_dout,
        img_cols_empty_n,
        img_cols_read,
        img_data_V_din,
        img_data_V_full_n,
        img_data_V_write,
        img_rows_out_din,
        img_rows_out_full_n,
        img_rows_out_write,
        img_cols_out_din,
        img_cols_out_full_n,
        img_cols_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [7:0] input_r_TKEEP;
input  [7:0] input_r_TSTRB;
input  [0:0] input_r_TUSER;
input  [0:0] input_r_TLAST;
input  [0:0] input_r_TID;
input  [0:0] input_r_TDEST;
input  [15:0] img_rows_dout;
input   img_rows_empty_n;
output   img_rows_read;
input  [15:0] img_cols_dout;
input   img_cols_empty_n;
output   img_cols_read;
output  [7:0] img_data_V_din;
input   img_data_V_full_n;
output   img_data_V_write;
output  [15:0] img_rows_out_din;
input   img_rows_out_full_n;
output   img_rows_out_write;
output  [15:0] img_cols_out_din;
input   img_cols_out_full_n;
output   img_cols_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg input_r_TREADY;
reg img_rows_read;
reg img_cols_read;
reg img_data_V_write;
reg img_rows_out_write;
reg img_cols_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    input_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln132_fu_409_p2;
wire   [0:0] or_ln138_fu_418_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] ap_phi_mux_last_1_i_phi_fu_346_p4;
reg    img_rows_blk_n;
reg    img_cols_blk_n;
reg    img_data_V_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln132_reg_509;
reg    img_rows_out_blk_n;
reg    img_cols_out_blk_n;
reg   [0:0] axi_last_V_1_i_reg_250;
reg   [63:0] axi_data_V_1_i_reg_261;
reg   [20:0] index_assign_reg_272;
reg   [0:0] last_0_i_reg_282;
reg   [0:0] last_1_reg_294;
reg   [63:0] p_Val2_s_reg_307;
reg   [15:0] img_rows_read_reg_444;
reg    ap_block_state1;
reg   [15:0] img_cols_read_reg_449;
wire   [10:0] empty_fu_363_p1;
reg   [10:0] empty_reg_454;
reg   [63:0] tmp_data_V_reg_460;
reg   [0:0] tmp_last_V_reg_468;
wire   [20:0] smax_cast_i_fu_371_p1;
reg   [20:0] smax_cast_i_reg_480;
wire    ap_CS_fsm_state3;
wire   [16:0] empty_43_fu_374_p1;
wire   [16:0] empty_44_fu_377_p1;
reg   [16:0] empty_44_reg_490;
wire   [0:0] icmp_ln128_fu_389_p2;
wire    ap_CS_fsm_state4;
wire   [10:0] i_fu_394_p2;
reg   [10:0] i_reg_499;
wire   [20:0] idx_fu_400_p2;
reg   [20:0] idx_reg_504;
reg    ap_predicate_op71_read_state5;
reg    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [20:0] add_ln154_fu_424_p2;
wire   [7:0] trunc_ln647_fu_430_p1;
reg   [7:0] trunc_ln647_reg_522;
reg    ap_block_state8;
wire   [16:0] add_ln128_fu_439_p2;
wire    ap_CS_fsm_state9;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [16:0] indvars_iv_reg_197;
reg   [0:0] axi_last_V_3_i_reg_319;
reg   [0:0] axi_last_V_0_i_reg_207;
reg   [63:0] axi_data_V_3_i_reg_331;
reg   [63:0] axi_data_V_0_i_reg_217;
reg   [20:0] idx_0_i_reg_227;
reg   [10:0] i_0_i_reg_239;
reg   [0:0] ap_phi_mux_axi_last_V_1_i_phi_fu_253_p4;
reg   [63:0] ap_phi_mux_axi_data_V_1_i_phi_fu_264_p4;
reg   [0:0] ap_phi_mux_last_0_i_phi_fu_286_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_last_1_reg_294;
reg   [63:0] ap_phi_mux_p_Val2_s_phi_fu_311_p4;
wire   [63:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_307;
wire    ap_CS_fsm_state7;
reg   [0:0] last_1_i_reg_343;
reg   [0:0] start_1_i_fu_140;
reg    ap_block_pp1_stage0_01001;
wire   [15:0] zext_ln128_fu_385_p1;
wire   [16:0] trunc_ln132_fu_405_p1;
wire   [0:0] tmp_user_V_fu_367_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [63:0] input_r_TDATA_int;
wire    input_r_TVALID_int;
reg    input_r_TREADY_int;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [7:0] input_r_TKEEP_int;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [7:0] input_r_TSTRB_int;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] input_r_TUSER_int;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] input_r_TID_int;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] input_r_TDEST_int;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_204;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

regslice_both #(
    .DataWidth( 64 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int),
    .vld_out(input_r_TVALID_int),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_r_TUSER),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(input_r_TUSER_int),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_r_TID),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(input_r_TID_int),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_r_TDEST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(input_r_TDEST_int),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(input_r_TREADY_int),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln128_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_389_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_389_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V_0_i_reg_217 <= tmp_data_V_reg_460;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_data_V_0_i_reg_217 <= axi_data_V_3_i_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_reg_509 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_data_V_1_i_reg_261 <= p_Val2_s_reg_307;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_389_p2 == 1'd1))) begin
        axi_data_V_1_i_reg_261 <= axi_data_V_0_i_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_3_i_reg_331 <= axi_data_V_1_i_reg_261;
    end else if ((~((last_1_i_reg_343 == 1'd0) & (input_r_TVALID_int == 1'b0)) & (last_1_i_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_data_V_3_i_reg_331 <= input_r_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V_0_i_reg_207 <= tmp_last_V_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_last_V_0_i_reg_207 <= axi_last_V_3_i_reg_319;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_reg_509 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        axi_last_V_1_i_reg_250 <= last_1_reg_294;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_389_p2 == 1'd1))) begin
        axi_last_V_1_i_reg_250 <= axi_last_V_0_i_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_3_i_reg_319 <= axi_last_V_1_i_reg_250;
    end else if ((~((last_1_i_reg_343 == 1'd0) & (input_r_TVALID_int == 1'b0)) & (last_1_i_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_last_V_3_i_reg_319 <= input_r_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_i_reg_239 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_i_reg_239 <= i_reg_499;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        idx_0_i_reg_227 <= 21'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        idx_0_i_reg_227 <= idx_reg_504;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_409_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        index_assign_reg_272 <= add_ln154_fu_424_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_389_p2 == 1'd1))) begin
        index_assign_reg_272 <= idx_0_i_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv_reg_197 <= empty_43_fu_374_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvars_iv_reg_197 <= add_ln128_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_reg_509 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        last_0_i_reg_282 <= last_1_reg_294;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_389_p2 == 1'd1))) begin
        last_0_i_reg_282 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        last_1_i_reg_343 <= last_0_i_reg_282;
    end else if ((~((last_1_i_reg_343 == 1'd0) & (input_r_TVALID_int == 1'b0)) & (last_1_i_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        last_1_i_reg_343 <= input_r_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_204)) begin
        if (((or_ln138_fu_418_p2 == 1'd0) & (icmp_ln132_fu_409_p2 == 1'd0))) begin
            last_1_reg_294 <= input_r_TLAST_int;
        end else if (((or_ln138_fu_418_p2 == 1'd1) & (icmp_ln132_fu_409_p2 == 1'd0))) begin
            last_1_reg_294 <= ap_phi_mux_axi_last_V_1_i_phi_fu_253_p4;
        end else if ((1'b1 == 1'b1)) begin
            last_1_reg_294 <= ap_phi_reg_pp1_iter0_last_1_reg_294;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_204)) begin
        if (((or_ln138_fu_418_p2 == 1'd0) & (icmp_ln132_fu_409_p2 == 1'd0))) begin
            p_Val2_s_reg_307 <= input_r_TDATA_int;
        end else if (((or_ln138_fu_418_p2 == 1'd1) & (icmp_ln132_fu_409_p2 == 1'd0))) begin
            p_Val2_s_reg_307 <= ap_phi_mux_axi_data_V_1_i_phi_fu_264_p4;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_307 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_307;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_409_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        start_1_i_fu_140 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        start_1_i_fu_140 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_44_reg_490[10 : 0] <= empty_44_fu_377_p1[10 : 0];
        smax_cast_i_reg_480[10 : 0] <= smax_cast_i_fu_371_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((img_cols_out_full_n == 1'b0) | (img_rows_out_full_n == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_454 <= empty_fu_363_p1;
        img_cols_read_reg_449 <= img_cols_dout;
        img_rows_read_reg_444 <= img_rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_499 <= i_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln132_reg_509 <= icmp_ln132_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln128_fu_389_p2 == 1'd1))) begin
        idx_reg_504 <= idx_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((input_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_460 <= input_r_TDATA_int;
        tmp_last_V_reg_468 <= input_r_TLAST_int;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln647_reg_522 <= trunc_ln647_fu_430_p1;
    end
end

always @ (*) begin
    if ((icmp_ln132_fu_409_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_509 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_axi_data_V_1_i_phi_fu_264_p4 = p_Val2_s_reg_307;
    end else begin
        ap_phi_mux_axi_data_V_1_i_phi_fu_264_p4 = axi_data_V_1_i_reg_261;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_509 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_axi_last_V_1_i_phi_fu_253_p4 = last_1_reg_294;
    end else begin
        ap_phi_mux_axi_last_V_1_i_phi_fu_253_p4 = axi_last_V_1_i_reg_250;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_509 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_last_0_i_phi_fu_286_p4 = last_1_reg_294;
    end else begin
        ap_phi_mux_last_0_i_phi_fu_286_p4 = last_0_i_reg_282;
    end
end

always @ (*) begin
    if ((icmp_ln132_fu_409_p2 == 1'd0)) begin
        if ((or_ln138_fu_418_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_311_p4 = input_r_TDATA_int;
        end else if ((or_ln138_fu_418_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_311_p4 = ap_phi_mux_axi_data_V_1_i_phi_fu_264_p4;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_311_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_307;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_311_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_307;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_blk_n = img_cols_empty_n;
    end else begin
        img_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_out_blk_n = img_cols_out_full_n;
    end else begin
        img_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_cols_out_full_n == 1'b0) | (img_rows_out_full_n == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_out_write = 1'b1;
    end else begin
        img_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_cols_out_full_n == 1'b0) | (img_rows_out_full_n == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_cols_read = 1'b1;
    end else begin
        img_cols_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_509 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        img_data_V_blk_n = img_data_V_full_n;
    end else begin
        img_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln132_reg_509 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        img_data_V_write = 1'b1;
    end else begin
        img_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_blk_n = img_rows_empty_n;
    end else begin
        img_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_out_blk_n = img_rows_out_full_n;
    end else begin
        img_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((img_cols_out_full_n == 1'b0) | (img_rows_out_full_n == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_out_write = 1'b1;
    end else begin
        img_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((img_cols_out_full_n == 1'b0) | (img_rows_out_full_n == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_rows_read = 1'b1;
    end else begin
        img_rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((or_ln138_fu_418_p2 == 1'd0) & (icmp_ln132_fu_409_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((last_1_i_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        input_r_TDATA_blk_n = input_r_TVALID_int;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_r_TVALID == 1'b1) & (regslice_both_AXI_video_strm_V_data_V_U_ack_in == 1'b1))) begin
        input_r_TREADY = 1'b1;
    end else begin
        input_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op71_read_state5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((input_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((last_1_i_reg_343 == 1'd0) & (input_r_TVALID_int == 1'b0)) & (last_1_i_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        input_r_TREADY_int = 1'b1;
    end else begin
        input_r_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln128_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((img_cols_out_full_n == 1'b0) | (img_rows_out_full_n == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_367_p1 == 1'd0) & (input_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((input_r_TVALID_int == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (tmp_user_V_fu_367_p1 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln128_fu_389_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln132_fu_409_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln132_fu_409_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((last_1_i_reg_343 == 1'd0) & (input_r_TVALID_int == 1'b0)) & (last_1_i_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((last_1_i_reg_343 == 1'd0) & (input_r_TVALID_int == 1'b0)) & (1'b1 == ap_CS_fsm_state8) & (ap_phi_mux_last_1_i_phi_fu_346_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln128_fu_439_p2 = (empty_44_reg_490 + indvars_iv_reg_197);

assign add_ln154_fu_424_p2 = (21'd1 + index_assign_reg_272);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((input_r_TVALID_int == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_predicate_op71_read_state5 == 1'b1)) | ((icmp_ln132_reg_509 == 1'd0) & (img_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((input_r_TVALID_int == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_predicate_op71_read_state5 == 1'b1)) | ((icmp_ln132_reg_509 == 1'd0) & (img_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((input_r_TVALID_int == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_predicate_op71_read_state5 == 1'b1)) | ((icmp_ln132_reg_509 == 1'd0) & (img_data_V_full_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((img_cols_out_full_n == 1'b0) | (img_rows_out_full_n == 1'b0) | (img_cols_empty_n == 1'b0) | (img_rows_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((input_r_TVALID_int == 1'b0) & (ap_predicate_op71_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln132_reg_509 == 1'd0) & (img_data_V_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((last_1_i_reg_343 == 1'd0) & (input_r_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_condition_204 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_last_1_i_phi_fu_346_p4 = last_1_i_reg_343;

assign ap_phi_reg_pp1_iter0_last_1_reg_294 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_307 = 'bx;

always @ (*) begin
    ap_predicate_op71_read_state5 = ((or_ln138_fu_418_p2 == 1'd0) & (icmp_ln132_fu_409_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign empty_43_fu_374_p1 = img_cols_read_reg_449;

assign empty_44_fu_377_p1 = empty_reg_454;

assign empty_fu_363_p1 = img_cols_dout[10:0];

assign i_fu_394_p2 = (i_0_i_reg_239 + 11'd1);

assign icmp_ln128_fu_389_p2 = ((zext_ln128_fu_385_p1 < img_rows_read_reg_444) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_409_p2 = ((trunc_ln132_fu_405_p1 == indvars_iv_reg_197) ? 1'b1 : 1'b0);

assign idx_fu_400_p2 = (smax_cast_i_reg_480 + idx_0_i_reg_227);

assign img_cols_out_din = img_cols_dout;

assign img_data_V_din = trunc_ln647_reg_522;

assign img_rows_out_din = img_rows_dout;

assign or_ln138_fu_418_p2 = (start_1_i_fu_140 | ap_phi_mux_last_0_i_phi_fu_286_p4);

assign smax_cast_i_fu_371_p1 = empty_reg_454;

assign start_out = real_start;

assign tmp_user_V_fu_367_p1 = input_r_TUSER_int;

assign trunc_ln132_fu_405_p1 = index_assign_reg_272[16:0];

assign trunc_ln647_fu_430_p1 = ap_phi_mux_p_Val2_s_phi_fu_311_p4[7:0];

assign zext_ln128_fu_385_p1 = i_0_i_reg_239;

always @ (posedge ap_clk) begin
    smax_cast_i_reg_480[20:11] <= 10'b0000000000;
    empty_44_reg_490[16:11] <= 6'b000000;
end

endmodule //AXIvideo2xfMat








































































































































































































